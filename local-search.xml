<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo</title>
    <link href="/2021/05/26/%E5%B7%A5%E5%85%B7/Hexo/"/>
    <url>/2021/05/26/%E5%B7%A5%E5%85%B7/Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub博客"><a href="#GitHub博客" class="headerlink" title="GitHub博客"></a>GitHub博客</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><ul><li><p>首先你需要注册一个 <strong>GitHub</strong> 账号，并在个人主界面里选择创建一个新的 <strong>Repository</strong> 。</p><p><img src="http://uranus.ff666.cn/images/20210526150154.jpeg"></p></li><li><p>进入页面后，在 <strong>Repository Name</strong> 的位置填写域名，格式是 <strong>username.github.io</strong>。</p></li><li><p>创建成功之后，点击右上角的 <strong>Settings</strong>，可以对 <strong>GitHub Pages</strong> 进行设置。</p></li></ul><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><ul><li><p>在 <strong>Custom domain</strong> 下，输入自定义域，然后单击 Save，这将创建一个在发布源根目录中添加 <strong>CNAME</strong> 文件的提交。</p><p><img src="http://uranus.ff666.cn/images/20210526162916.png"></p></li><li><p>导航到您的 DNS 提供程序并创建 <strong>CNAME</strong> 的解析记录，使子域指向你站点的默认域，例如，如果要对你的用户站点使用子域 <strong><a href="http://www.example.com/">www.example.com</a></strong>，可以创建 <strong>CNAME</strong> 记录，使  <strong><a href="http://www.example.com/">www.example.com</a></strong>  指向 <strong>username.github.io</strong>。</p></li><li><p>对 DNS 的配置不是立即生效的，过10分钟再去访问你的域名看看有没有配置成功。</p></li></ul><h1 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h1><ul><li><p>配置 GitHub 的 SSH 公钥访问。</p></li><li><p>安装 <strong>hexo deploy</strong> 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>配置deploy的地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:hongff666/uranus.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure></li><li><p>上传到github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo deploy<br></code></pre></td></tr></table></figure></li></ul><h1 id="图片存储"><a href="#图片存储" class="headerlink" title="图片存储"></a>图片存储</h1><h2 id="OSS概念"><a href="#OSS概念" class="headerlink" title="OSS概念"></a>OSS概念</h2><ul><li>OSS类似于网盘，但是你可以拿到<strong>文件链接</strong>，包含附件服务器、头像服务器、图片服务器、下载服务器等，对象存储OSS是在云上提供无层次结构的<strong>分布式存储</strong>产品，为用户提供单价较低且快速可靠的<strong>数据存储方案</strong>。</li><li>用户可通过云服务器实例或互联网使用 Web <strong>API 接口存储和检索数据</strong>。在 OSS 上的数据，用户使用指定域名的 URL 地址，通过 HTTP&#x2F;HTTPS 协议存储和检索每个独立的数据对象。</li></ul><h2 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h2><h3 id="开通服务"><a href="#开通服务" class="headerlink" title="开通服务"></a>开通服务</h3><ul><li><p>登录<a href="https://www.aliyun.com/">阿里云</a>。打开侧边栏，选择对象存储OSS。</p><p><img src="http://uranus.ff666.cn/images/20210526204337.jpeg"></p></li><li><p>对象存储界面右部选择创建Bucket。</p><img src="http://uranus.ff666.cn/images/20210526205039.jpeg" style="zoom:67%" /></li><li><p>因为一开始没有可用的<strong>存储包</strong>，因此点击购买。</p><img src="http://uranus.ff666.cn/images/20210526205920.jpeg" style="zoom: 50%;" /><ul><li>这里可以根据自己的实际情况来设定购买存储包的方案，如果在中国大陆，建议地域选择中国大陆通用。</li></ul></li><li><p>购买完成后，继续进行创建 Bucket 工作，读写权限要设定为<strong>公共读</strong>，其他的服务选项，如果自己有特殊需要，可以选择配置同城冗余存储，版本控制等服务，如果没有可以默认，完成后点击确定即可。</p></li><li><p>注意：购买完<strong>存储包</strong>就可以了，至于<strong>流量包</strong>，默认的是<strong>按量计费</strong>，下图显示的是阿里云的计费方法</p><p><img src="http://uranus.ff666.cn/images/20210526210547.jpeg"></p><ul><li>如果是自己简单的写个博客或公众号，平时可能没有特别大的访问量，所以选择默认的按量计费，如果访问量较大的，可以考虑包年包月。</li></ul></li></ul><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><ul><li><p>最好是单独创建一个用户来单独操作OSS（用户的定义就是需要访问云资源的人员或应用程序），这样给这个用户赋予单独的访问 OSS的权限，更加安全方便。</p></li><li><p>添加用户步骤为：点击自己头像，然后选择访问控制，如下图所示</p><p><img src="http://uranus.ff666.cn/images/20210526211109.jpeg"></p></li><li><p>点击用户，选择新建用户，如下图所示</p><p><img src="http://uranus.ff666.cn/images/20210526211138.jpeg"></p></li><li><p>之后进行用户配置，注意要勾选<strong>编程访问</strong>，控制台密码登录可以不选择，登录名称，显示名称自己设定，如下图所示</p><p><img src="http://uranus.ff666.cn/images/20210526211232.jpeg"></p></li><li><p>确定后得到创建用户的信息，这里要记下 <strong>AccessKey ID</strong> 和 <strong>AccessKeySecret</strong>，之后配置PICGO用到，因为这个界面关掉之后就不好找了，所以最好记在记事本里，如下图所示</p><p><img src="http://uranus.ff666.cn/images/20210526211326.png"></p></li><li><p>设置用户权限，使得用户只能访问OSS的服务。点击添加权限，如下图所示</p><p><img src="http://uranus.ff666.cn/images/20210526211406.jpeg"></p></li><li><p>选择管理对象存储服务权限，点击确定，如下图所示</p><p><img src="http://uranus.ff666.cn/images/20210526211432.jpeg"></p></li></ul><h2 id="配置PICGO"><a href="#配置PICGO" class="headerlink" title="配置PICGO"></a>配置PICGO</h2><ul><li><p>下载 <a href="https://github.com/Molunerfinn/PicGo/releases">PICGO</a> 里面有相应操作系统的安装包文件以及源码，点击下载安装文件即可。</p></li><li><p>安装完成后，打开图床设置，点击阿里云OSS，得到如下界面</p><p><img src="http://uranus.ff666.cn/images/20210526212200.png"></p><ul><li><p>**设定keyid **就是创建用户的 AccessKey ID。</p></li><li><p><strong>KeySecret</strong> 就是 AccessKeySecret。</p></li><li><p>**存储空间名 **就是创建Bucket的名字。</p></li><li><p>**存储区域 **也是创建时设定的，忘记的可以通过Bucket概览查看，如下图所示</p><p><img src="http://uranus.ff666.cn/images/20210526212754.jpeg"></p></li><li><p>**存储路径 **默认设置img&#x2F;即可，如果自己有已经备案的域名，可以填写设定自定义域名，如果没有不填即可。</p></li></ul></li><li><p>点击确定即完成，也可以设置为默认图床。</p></li></ul><h1 id="Hexo使用"><a href="#Hexo使用" class="headerlink" title="Hexo使用"></a>Hexo使用</h1><ul><li><p>安装完 NodeJS 后， 用 npm 安装 hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-cli -g<br>$ hexo -v<br></code></pre></td></tr></table></figure></li><li><p>初始化博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init demo<br>$ <span class="hljs-built_in">cd</span> demo<br>$ npm i -d<br>$ hexo generate<br></code></pre></td></tr></table></figure></li><li><p>生成静态页面后，可以用 hexo server 启动服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo sever<br></code></pre></td></tr></table></figure></li><li><p>主题设置</p><ul><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-fluid</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
